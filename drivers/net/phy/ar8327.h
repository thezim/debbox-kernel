/*
 * ar8327.h: AR8216 switch driver
 *
 * Copyright (C) 2009 Felix Fietkau <nbd@nbd.name>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

#ifndef __AR8327_H
#define __AR8327_H

#define AR8327_NUM_PORTS	7
#define AR8327_NUM_LEDS		15
#define AR8327_PORTS_ALL	0x7f
#define AR8327_NUM_LED_CTRL_REGS	4

#define AR8327_PHY_ADDR_CPU_0	(0x00)
#define AR8327_PHY_ADDR_CPU_1	(0x04)
#define AR8327_PORT_NUM_CPU_0	(0x00)
#define AR8327_PORT_NUM_CPU_1	(0x06)
#define AR8327_PORT_NUM_PHY_5	(0x05)

#define AR8327_REG_MASK				0x000

#define AR8327_REG_PAD0_MODE			0x004
#define AR8327_REG_PAD5_MODE			0x008
#define AR8327_REG_PAD6_MODE			0x00c
#define   AR8327_PAD_MAC_MII_RXCLK_SEL		BIT(0)
#define   AR8327_PAD_MAC_MII_TXCLK_SEL		BIT(1)
#define   AR8327_PAD_MAC_MII_EN			BIT(2)
#define   AR8327_PAD_MAC_GMII_RXCLK_SEL		BIT(4)
#define   AR8327_PAD_MAC_GMII_TXCLK_SEL		BIT(5)
#define   AR8327_PAD_MAC_GMII_EN		BIT(6)
#define   AR8327_PAD_SGMII_EN			BIT(7)
#define   AR8327_PAD_PHY_MII_RXCLK_SEL		BIT(8)
#define   AR8327_PAD_PHY_MII_TXCLK_SEL		BIT(9)
#define   AR8327_PAD_PHY_MII_EN			BIT(10)
#define   AR8327_PAD_PHY_GMII_PIPE_RXCLK_SEL	BIT(11)
#define   AR8327_PAD_PHY_GMII_RXCLK_SEL		BIT(12)
#define   AR8327_PAD_PHY_GMII_TXCLK_SEL		BIT(13)
#define   AR8327_PAD_PHY_GMII_EN		BIT(14)
#define   AR8327_PAD_PHYX_GMII_EN		BIT(16)
#define   AR8327_PAD_PHYX_RGMII_EN		BIT(17)
#define   AR8327_PAD_PHYX_MII_EN		BIT(18)
#define   AR8327_PAD_SGMII_DELAY_EN		BIT(19)
#define   AR8327_PAD_RGMII_RXCLK_DELAY_SEL	BITS(20, 2)
#define   AR8327_PAD_RGMII_RXCLK_DELAY_SEL_S	20
#define   AR8327_PAD_RGMII_TXCLK_DELAY_SEL	BITS(22, 2)
#define   AR8327_PAD_RGMII_TXCLK_DELAY_SEL_S	22
#define   AR8327_PAD_RGMII_RXCLK_DELAY_EN	BIT(24)
#define   AR8327_PAD_RGMII_TXCLK_DELAY_EN	BIT(25)
#define   AR8327_PAD_RGMII_EN			BIT(26)

#define AR8327_REG_POWER_ON_STRIP		0x010
#define   AR8327_POWER_ON_STRIP_POWER_ON_SEL	BIT(31)
#define   AR8327_POWER_ON_STRIP_LED_OPEN_EN	BIT(24)
#define   AR8327_POWER_ON_STRIP_SERDES_AEN	BIT(7)

#define AR8327_REG_INT_STATUS0			0x020
#define   AR8327_INT0_VT_DONE			BIT(20)

#define AR8327_REG_INT_STATUS1			0x024
#define AR8327_REG_INT_MASK0			0x028
#define AR8327_REG_INT_MASK1			0x02c

#define AR8327_REG_MODULE_EN			0x030
#define   AR8327_MODULE_EN_MIB			BIT(0)
#define   AR8327_MODULE_EN_ACL			BIT(1)

#define AR8327_REG_MIB_FUNC			0x034
#define   AR8327_MIB_CPU_KEEP			BIT(20)

#define AR8327_REG_SERVICE_TAG			0x048
#define AR8327_REG_LED_CTRL(_i)			(0x050 + (_i) * 4)
#define AR8327_REG_LED_CTRL0			0x050
#define AR8327_REG_LED_CTRL1			0x054
#define AR8327_REG_LED_CTRL2			0x058
#define AR8327_REG_LED_CTRL3			0x05c
#define AR8327_REG_MAC_ADDR0			0x060
#define AR8327_REG_MAC_ADDR1			0x064

#define AR8327_REG_MAX_FRAME_SIZE		0x078
#define   AR8327_MAX_FRAME_SIZE_MTU		BITS(0, 14)

#define AR8327_REG_PORT_STATUS(_i)		(0x07c + (_i) * 4)
#define   AR8327_PORT_STATUS_TXFLOW_AUTO	BIT(10)
#define   AR8327_PORT_STATUS_RXFLOW_AUTO	BIT(11)

#define AR8327_REG_HEADER_CTRL			0x098
#define AR8327_REG_PORT_HEADER(_i)		(0x09c + (_i) * 4)

#define AR8327_REG_SGMII_CTRL			0x0e0
#define   AR8327_SGMII_CTRL_EN_PLL		BIT(1)
#define   AR8327_SGMII_CTRL_EN_RX		BIT(2)
#define   AR8327_SGMII_CTRL_EN_TX		BIT(3)

#define AR8327_REG_EEE_CTRL			0x100
#define   AR8327_EEE_CTRL_DISABLE_PHY(_i)	BIT(4 + (_i) * 2)

#define AR8327_PHY_MMD7_ADDR			0x7
#define AR8327_PHY_MMD7_EEE_ADV			0x3c

#define AR8327_REG_FRAME_ACK_CTRL0		0x210
#define   AR8327_FRAME_ACK_CTRL_IGMP_MLD_EN0	BIT(0)
#define   AR8327_FRAME_ACK_CTRL_IGMP_JOIN_EN0	BIT(1)
#define   AR8327_FRAME_ACK_CTRL_IGMP_LEAVE_EN0	BIT(2)
#define   AR8327_FRAME_ACK_CTRL_EAPOL_EN0	BIT(3)
#define   AR8327_FRAME_ACK_CTRL_DHCP_EN0	BIT(4)
#define   AR8327_FRAME_ACK_CTRL_ARP_ACK_EN0	BIT(5)
#define   AR8327_FRAME_ACK_CTRL_ARP_REQ_EN0	BIT(6)
#define   AR8327_FRAME_ACK_CTRL_IGMP_MLD_EN1	BIT(8)
#define   AR8327_FRAME_ACK_CTRL_IGMP_JOIN_EN1	BIT(9)
#define   AR8327_FRAME_ACK_CTRL_IGMP_LEAVE_EN1	BIT(10)
#define   AR8327_FRAME_ACK_CTRL_EAPOL_EN1	BIT(11)
#define   AR8327_FRAME_ACK_CTRL_DHCP_EN1	BIT(12)
#define   AR8327_FRAME_ACK_CTRL_ARP_ACK_EN1	BIT(13)
#define   AR8327_FRAME_ACK_CTRL_ARP_REQ_EN1	BIT(14)
#define   AR8327_FRAME_ACK_CTRL_IGMP_MLD_EN2	BIT(16)
#define   AR8327_FRAME_ACK_CTRL_IGMP_JOIN_EN2	BIT(17)
#define   AR8327_FRAME_ACK_CTRL_IGMP_LEAVE_EN2	BIT(18)
#define   AR8327_FRAME_ACK_CTRL_EAPOL_EN2	BIT(19)
#define   AR8327_FRAME_ACK_CTRL_DHCP_EN2	BIT(20)
#define   AR8327_FRAME_ACK_CTRL_ARP_ACK_EN2	BIT(21)
#define   AR8327_FRAME_ACK_CTRL_ARP_REQ_EN2	BIT(22)
#define   AR8327_FRAME_ACK_CTRL_IGMP_MLD_EN3	BIT(24)
#define   AR8327_FRAME_ACK_CTRL_IGMP_JOIN_EN3	BIT(25)
#define   AR8327_FRAME_ACK_CTRL_IGMP_LEAVE_EN3	BIT(26)
#define   AR8327_FRAME_ACK_CTRL_EAPOL_EN3	BIT(27)
#define   AR8327_FRAME_ACK_CTRL_DHCP_EN3	BIT(28)
#define   AR8327_FRAME_ACK_CTRL_ARP_ACK_EN3	BIT(29)
#define   AR8327_FRAME_ACK_CTRL_ARP_REQ_EN3	BIT(30)

#define AR8327_REG_FRAME_ACK_CTRL1		0x214
#define   AR8327_FRAME_ACK_CTRL_IGMP_MLD_EN4	BIT(0)
#define   AR8327_FRAME_ACK_CTRL_IGMP_JOIN_EN4	BIT(1)
#define   AR8327_FRAME_ACK_CTRL_IGMP_LEAVE_EN4	BIT(2)
#define   AR8327_FRAME_ACK_CTRL_EAPOL_EN4	BIT(3)
#define   AR8327_FRAME_ACK_CTRL_DHCP_EN4	BIT(4)
#define   AR8327_FRAME_ACK_CTRL_ARP_ACK_EN4	BIT(5)
#define   AR8327_FRAME_ACK_CTRL_ARP_REQ_EN4	BIT(6)
#define   AR8327_FRAME_ACK_CTRL_IGMP_MLD_EN5	BIT(8)
#define   AR8327_FRAME_ACK_CTRL_IGMP_JOIN_EN5	BIT(9)
#define   AR8327_FRAME_ACK_CTRL_IGMP_LEAVE_EN5	BIT(10)
#define   AR8327_FRAME_ACK_CTRL_EAPOL_EN5	BIT(11)
#define   AR8327_FRAME_ACK_CTRL_DHCP_EN5	BIT(12)
#define   AR8327_FRAME_ACK_CTRL_ARP_ACK_EN5	BIT(13)
#define   AR8327_FRAME_ACK_CTRL_ARP_REQ_EN5	BIT(14)
#define   AR8327_FRAME_ACK_CTRL_IGMP_MLD_EN6	BIT(16)
#define   AR8327_FRAME_ACK_CTRL_IGMP_JOIN_EN6	BIT(17)
#define   AR8327_FRAME_ACK_CTRL_IGMP_LEAVE_EN6	BIT(18)
#define   AR8327_FRAME_ACK_CTRL_EAPOL_EN6	BIT(19)
#define   AR8327_FRAME_ACK_CTRL_DHCP_EN6	BIT(20)
#define   AR8327_FRAME_ACK_CTRL_ARP_ACK_EN6	BIT(21)
#define   AR8327_FRAME_ACK_CTRL_ARP_REQ_EN6	BIT(22)
#define   AR8327_FRAME_ACK_CTRL_IGMP_V3_EN	BIT(24)
#define   AR8327_FRAME_ACK_CTRL_PPPOE_EN	BIT(25)

#define AR8327_REG_FRAME_ACK_CTRL(_i)		(0x210 + ((_i) / 4) * 0x4)
#define   AR8327_FRAME_ACK_CTRL_IGMP_MLD	BIT(0)
#define   AR8327_FRAME_ACK_CTRL_IGMP_JOIN	BIT(1)
#define   AR8327_FRAME_ACK_CTRL_IGMP_LEAVE	BIT(2)
#define   AR8327_FRAME_ACK_CTRL_EAPOL		BIT(3)
#define   AR8327_FRAME_ACK_CTRL_DHCP		BIT(4)
#define   AR8327_FRAME_ACK_CTRL_ARP_ACK		BIT(5)
#define   AR8327_FRAME_ACK_CTRL_ARP_REQ		BIT(6)
#define   AR8327_FRAME_ACK_CTRL_S(_i)		(((_i) % 4) * 8)

#define AR8327_REG_PORT_VLAN0(_i)		(0x420 + (_i) * 0x8)
#define   AR8327_PORT_VLAN0_DEF_PRI_MASK	BITS(0, 3)
#define   AR8327_PORT_VLAN0_DEF_SVID		BITS(0, 12)
#define   AR8327_PORT_VLAN0_DEF_SVID_S		0
#define   AR8327_PORT_VLAN0_DEF_SPRI		BITS(13, 3)
#define   AR8327_PORT_VLAN0_DEF_SPRI_S		13
#define   AR8327_PORT_VLAN0_DEF_CVID		BITS(16, 12)
#define   AR8327_PORT_VLAN0_DEF_CVID_S		16
#define   AR8327_PORT_VLAN0_DEF_CPRI		BITS(29, 3)
#define   AR8327_PORT_VLAN0_DEF_CPRI_S		29

#define AR8327_REG_PORT_VLAN1(_i)		(0x424 + (_i) * 0x8)
#define   AR8327_PORT_VLAN1_VLAN_PRI_PROP	BIT(4)
#define   AR8327_PORT_VLAN1_PORT_VLAN_PROP	BIT(6)
#define   AR8327_PORT_VLAN1_OUT_MODE		BITS(12, 2)
#define   AR8327_PORT_VLAN1_OUT_MODE_S		12
#define   AR8327_PORT_VLAN1_OUT_MODE_UNMOD	0
#define   AR8327_PORT_VLAN1_OUT_MODE_UNTAG	1
#define   AR8327_PORT_VLAN1_OUT_MODE_TAG	2
#define   AR8327_PORT_VLAN1_OUT_MODE_UNTOUCH	3

/* ACL Registers */

#define HSL_RW 1
#define HSL_RO 0

#define AR8327_ACL_FILTER_MAC 1
#define AR8327_ACL_FLT_STARTEND 0x3

#define AR8327_ACL_FUNC0_REG 0x0400
#define AR8327_ACL_FUNC1_REG 0x0404
#define AR8327_ACL_FUNC2_REG 0x0408
#define AR8327_ACL_FUNC3_REG 0x040c
#define AR8327_ACL_FUNC4_REG 0x0410
#define AR8327_ACL_FUNC5_REG 0x0414
#define AR8327_ACL_FUNC0_BUSY BIT(31)

#define AR8327_ACL_RSLT2 12
#define AR8327_ACL_RSLT2_OFFSET 0x5a008
#define AR8327_ACL_RSLT2_E_LENGTH 4
#define AR8327_ACL_RSLT2_E_OFFSET 0x10
#define AR8327_ACL_RSLT2_NR_E 96

#define DES_PORT_EN
#define AR8327_ACL_RSLT2_DES_PORT_EN_BOFFSET 4
#define AR8327_ACL_RSLT2_DES_PORT_EN_BLEN 1
#define AR8327_ACL_RSLT2_DES_PORT_EN_FLAG HSL_RW

#define DES_PORT1
#define AR8327_ACL_RSLT2_DES_PORT1_BOFFSET 0
#define AR8327_ACL_RSLT2_DES_PORT1_BLEN 4
#define AR8327_ACL_RSLT2_DES_PORT1_FLAG HSL_RW

#define AR8327_ACL_RSLT1 11
#define AR8327_ACL_RSLT1_OFFSET 0x5a004
#define AR8327_ACL_RSLT1_E_LENGTH 4
#define AR8327_ACL_RSLT1_E_OFFSET 0x10
#define AR8327_ACL_RSLT1_NR_E 96

#define DES_PORT0
#define AR8327_ACL_RSLT1_DES_PORT0_BOFFSET 29
#define AR8327_ACL_RSLT1_DES_PORT0_BLEN 3
#define AR8327_ACL_RSLT1_DES_PORT0_FLAG HSL_RW

#define AR8327_MAC_RUL_V0 0
#define AR8327_MAC_RUL_V0_OFFSET 0x58000
#define AR8327_MAC_RUL_V0_E_LENGTH 4
#define AR8327_MAC_RUL_V0_E_OFFSET 0x20
#define AR8327_MAC_RUL_V0_NR_E 96

#define DAV_BYTE2
#define AR8327_MAC_RUL_V0_DAV_BYTE2_BOFFSET 24
#define AR8327_MAC_RUL_V0_DAV_BYTE2_BLEN 8
#define AR8327_MAC_RUL_V0_DAV_BYTE2_FLAG HSL_RW

#define DAV_BYTE3
#define AR8327_MAC_RUL_V0_DAV_BYTE3_BOFFSET 16
#define AR8327_MAC_RUL_V0_DAV_BYTE3_BLEN 8
#define AR8327_MAC_RUL_V0_DAV_BYTE3_FLAG HSL_RW

#define DAV_BYTE4
#define AR8327_MAC_RUL_V0_DAV_BYTE4_BOFFSET 8
#define AR8327_MAC_RUL_V0_DAV_BYTE4_BLEN 8
#define AR8327_MAC_RUL_V0_DAV_BYTE4_FLAG HSL_RW

#define DAV_BYTE5
#define AR8327_MAC_RUL_V0_DAV_BYTE5_BOFFSET 0
#define AR8327_MAC_RUL_V0_DAV_BYTE5_BLEN 8
#define AR8327_MAC_RUL_V0_DAV_BYTE5_FLAG HSL_RW

#define AR8327_MAC_RUL_V1 1
#define AR8327_MAC_RUL_V1_OFFSET 0x58004
#define AR8327_MAC_RUL_V1_E_LENGTH 4
#define AR8327_MAC_RUL_V1_E_OFFSET 0x20
#define AR8327_MAC_RUL_V1_NR_E 96

#define SAV_BYTE4
#define AR8327_MAC_RUL_V1_SAV_BYTE4_BOFFSET 24
#define AR8327_MAC_RUL_V1_SAV_BYTE4_BLEN 8
#define AR8327_MAC_RUL_V1_SAV_BYTE4_FLAG HSL_RW

#define SAV_BYTE5
#define AR8327_MAC_RUL_V1_SAV_BYTE5_BOFFSET 16
#define AR8327_MAC_RUL_V1_SAV_BYTE5_BLEN 8
#define AR8327_MAC_RUL_V1_SAV_BYTE5_FLAG HSL_RW

#define DAV_BYTE0
#define AR8327_MAC_RUL_V1_DAV_BYTE0_BOFFSET 8
#define AR8327_MAC_RUL_V1_DAV_BYTE0_BLEN 8
#define AR8327_MAC_RUL_V1_DAV_BYTE0_FLAG HSL_RW

#define DAV_BYTE1
#define AR8327_MAC_RUL_V1_DAV_BYTE1_BOFFSET 0
#define AR8327_MAC_RUL_V1_DAV_BYTE1_BLEN 8
#define AR8327_MAC_RUL_V1_DAV_BYTE1_FLAG HSL_RW

#define AR8327_MAC_RUL_V2 2
#define AR8327_MAC_RUL_V2_OFFSET 0x58008
#define AR8327_MAC_RUL_V2_E_LENGTH 4
#define AR8327_MAC_RUL_V2_E_OFFSET 0x20
#define AR8327_MAC_RUL_V2_NR_E 96

#define SAV_BYTE0
#define AR8327_MAC_RUL_V2_SAV_BYTE0_BOFFSET 24
#define AR8327_MAC_RUL_V2_SAV_BYTE0_BLEN 8
#define AR8327_MAC_RUL_V2_SAV_BYTE0_FLAG HSL_RW

#define SAV_BYTE1
#define AR8327_MAC_RUL_V2_SAV_BYTE1_BOFFSET 16
#define AR8327_MAC_RUL_V2_SAV_BYTE1_BLEN 8
#define AR8327_MAC_RUL_V2_SAV_BYTE1_FLAG HSL_RW

#define SAV_BYTE2
#define AR8327_MAC_RUL_V2_SAV_BYTE2_BOFFSET 8
#define AR8327_MAC_RUL_V2_SAV_BYTE2_BLEN 8
#define AR8327_MAC_RUL_V2_SAV_BYTE2_FLAG HSL_RW

#define SAV_BYTE3
#define AR8327_MAC_RUL_V2_SAV_BYTE3_BOFFSET 0
#define AR8327_MAC_RUL_V2_SAV_BYTE3_BLEN 8
#define AR8327_MAC_RUL_V2_SAV_BYTE3_FLAG HSL_RW

#define AR8327_MAC_RUL_M0 5
#define AR8327_MAC_RUL_M0_OFFSET 0x59000
#define AR8327_MAC_RUL_M0_E_LENGTH 4
#define AR8327_MAC_RUL_M0_E_OFFSET 0x20
#define AR8327_MAC_RUL_M0_NR_E 96

#define DAM_BYTE2
#define AR8327_MAC_RUL_M0_DAM_BYTE2_BOFFSET 24
#define AR8327_MAC_RUL_M0_DAM_BYTE2_BLEN 8
#define AR8327_MAC_RUL_M0_DAM_BYTE2_FLAG HSL_RW

#define DAM_BYTE3
#define AR8327_MAC_RUL_M0_DAM_BYTE3_BOFFSET 16
#define AR8327_MAC_RUL_M0_DAM_BYTE3_BLEN 8
#define AR8327_MAC_RUL_M0_DAM_BYTE3_FLAG HSL_RW

#define DAM_BYTE4
#define AR8327_MAC_RUL_M0_DAM_BYTE4_BOFFSET 8
#define AR8327_MAC_RUL_M0_DAM_BYTE4_BLEN 8
#define AR8327_MAC_RUL_M0_DAM_BYTE4_FLAG HSL_RW

#define DAM_BYTE5
#define AR8327_MAC_RUL_M0_DAM_BYTE5_BOFFSET 0
#define AR8327_MAC_RUL_M0_DAM_BYTE5_BLEN 8
#define AR8327_MAC_RUL_M0_DAM_BYTE5_FLAG HSL_RW

#define AR8327_MAC_RUL_M1 6
#define AR8327_MAC_RUL_M1_OFFSET 0x59004
#define AR8327_MAC_RUL_M1_E_LENGTH 4
#define AR8327_MAC_RUL_M1_E_OFFSET 0x20
#define AR8327_MAC_RUL_M1_NR_E 96

#define SAM_BYTE4
#define AR8327_MAC_RUL_M1_SAM_BYTE4_BOFFSET 24
#define AR8327_MAC_RUL_M1_SAM_BYTE4_BLEN 8
#define AR8327_MAC_RUL_M1_SAM_BYTE4_FLAG HSL_RW

#define SAM_BYTE5
#define AR8327_MAC_RUL_M1_SAM_BYTE5_BOFFSET 16
#define AR8327_MAC_RUL_M1_SAM_BYTE5_BLEN 8
#define AR8327_MAC_RUL_M1_SAM_BYTE5_FLAG HSL_RW

#define DAM_BYTE0
#define AR8327_MAC_RUL_M1_DAM_BYTE0_BOFFSET 8
#define AR8327_MAC_RUL_M1_DAM_BYTE0_BLEN 8
#define AR8327_MAC_RUL_M1_DAM_BYTE0_FLAG HSL_RW

#define DAM_BYTE1
#define AR8327_MAC_RUL_M1_DAM_BYTE1_BOFFSET 0
#define AR8327_MAC_RUL_M1_DAM_BYTE1_BLEN 8
#define AR8327_MAC_RUL_M1_DAM_BYTE1_FLAG HSL_RW

#define AR8327_MAC_RUL_M2 7
#define AR8327_MAC_RUL_M2_OFFSET 0x59008
#define AR8327_MAC_RUL_M2_E_LENGTH 4
#define AR8327_MAC_RUL_M2_E_OFFSET 0x20
#define AR8327_MAC_RUL_M2_NR_E 96

#define SAM_BYTE0
#define AR8327_MAC_RUL_M2_SAM_BYTE0_BOFFSET 24
#define AR8327_MAC_RUL_M2_SAM_BYTE0_BLEN 8
#define AR8327_MAC_RUL_M2_SAM_BYTE0_FLAG HSL_RW

#define SAM_BYTE1
#define AR8327_MAC_RUL_M2_SAM_BYTE1_BOFFSET 16
#define AR8327_MAC_RUL_M2_SAM_BYTE1_BLEN 8
#define AR8327_MAC_RUL_M2_SAM_BYTE1_FLAG HSL_RW

#define SAM_BYTE2
#define AR8327_MAC_RUL_M2_SAM_BYTE2_BOFFSET 8
#define AR8327_MAC_RUL_M2_SAM_BYTE2_BLEN 8
#define AR8327_MAC_RUL_M2_SAM_BYTE2_FLAG HSL_RW

#define SAM_BYTE3
#define AR8327_MAC_RUL_M2_SAM_BYTE3_BOFFSET 0
#define AR8327_MAC_RUL_M2_SAM_BYTE3_BLEN 8
#define AR8327_MAC_RUL_M2_SAM_BYTE3_FLAG HSL_RW

#define AR8327_MAC_RUL_M4 9
#define AR8327_MAC_RUL_M4_OFFSET 0x59010
#define AR8327_MAC_RUL_M4_E_LENGTH 4
#define AR8327_MAC_RUL_M4_E_OFFSET 0x20
#define AR8327_MAC_RUL_M4_NR_E 96

#define VIDMSK
#define AR8327_MAC_RUL_M4_VIDMSK_BOFFSET 3
#define AR8327_MAC_RUL_M4_VIDMSK_BLEN 1
#define AR8327_MAC_RUL_M4_VIDMSK_FLAG HSL_RW

#define AR8327_MAC_RUL_V4 4
#define AR8327_MAC_RUL_V4_OFFSET 0x58010
#define AR8327_MAC_RUL_V4_E_LENGTH 4
#define AR8327_MAC_RUL_V4_E_OFFSET 0x20
#define AR8327_MAC_RUL_V4_NR_E 96

#define SRC_PT
#define AR8327_MAC_RUL_V4_SRC_PT_BOFFSET 0
#define AR8327_MAC_RUL_V4_SRC_PT_BLEN 7
#define AR8327_MAC_RUL_V4_SRC_PT_FLAG HSL_RW

#define RULE_VALID
#define AR8327_MAC_RUL_M4_RULE_VALID_BOFFSET 6
#define AR8327_MAC_RUL_M4_RULE_VALID_BLEN 2
#define AR8327_MAC_RUL_M4_RULE_VALID_FLAG HSL_RW

#define RULE_TYP
#define AR8327_MAC_RUL_M4_RULE_TYP_BOFFSET 0
#define AR8327_MAC_RUL_M4_RULE_TYP_BLEN 3
#define AR8327_MAC_RUL_M4_RULE_TYP_FLAG HSL_RW

#define AR8327_REG_ATU_DATA0			0x600
#define   AR8327_ATU_ADDR0			BITS(0, 8)
#define   AR8327_ATU_ADDR0_S			0
#define   AR8327_ATU_ADDR1			BITS(8, 8)
#define   AR8327_ATU_ADDR1_S			8
#define   AR8327_ATU_ADDR2			BITS(16, 8)
#define   AR8327_ATU_ADDR2_S			16
#define   AR8327_ATU_ADDR3			BITS(24, 8)
#define   AR8327_ATU_ADDR3_S			24
#define AR8327_REG_ATU_DATA1			0x604
#define   AR8327_ATU_ADDR4			BITS(0, 8)
#define   AR8327_ATU_ADDR4_S			0
#define   AR8327_ATU_ADDR5			BITS(8, 8)
#define   AR8327_ATU_ADDR5_S			8
#define   AR8327_ATU_PORTS			BITS(16, 7)
#define   AR8327_ATU_PORTS_S			16
#define   AR8327_ATU_PORT0			BIT(16)
#define   AR8327_ATU_PORT1			BIT(17)
#define   AR8327_ATU_PORT2			BIT(18)
#define   AR8327_ATU_PORT3			BIT(19)
#define   AR8327_ATU_PORT4			BIT(20)
#define   AR8327_ATU_PORT5			BIT(21)
#define   AR8327_ATU_PORT6			BIT(22)
#define AR8327_REG_ATU_DATA2			0x608
#define   AR8327_ATU_STATUS			BITS(0, 4)
#define   AR8327_ATU_VID			BITS(8, 12)
#define   AR8327_ATU_VID_S			8

#define AR8327_REG_ATU_FUNC			0x60c
#define   AR8327_ATU_FUNC_OP			BITS(0, 4)
#define   AR8327_ATU_FUNC_OP_NOOP		0x0
#define   AR8327_ATU_FUNC_OP_FLUSH		0x1
#define   AR8327_ATU_FUNC_OP_LOAD		0x2
#define   AR8327_ATU_FUNC_OP_PURGE		0x3
#define   AR8327_ATU_FUNC_OP_FLUSH_UNLOCKED	0x4
#define   AR8327_ATU_FUNC_OP_FLUSH_PORT		0x5
#define   AR8327_ATU_FUNC_OP_GET_NEXT		0x6
#define   AR8327_ATU_FUNC_OP_SEARCH_MAC		0x7
#define   AR8327_ATU_FUNC_OP_CHANGE_TRUNK	0x8
#define   AR8327_ATU_PORT_NUM			BITS(8, 4)
#define   AR8327_ATU_PORT_NUM_S			8
#define   AR8327_ATU_FUNC_BUSY			BIT(31)

#define AR8327_REG_VTU_FUNC0			0x0610
#define   AR8327_VTU_FUNC0_EG_MODE		BITS(4, 14)
#define   AR8327_VTU_FUNC0_EG_MODE_S(_i)	(4 + (_i) * 2)
#define   AR8327_VTU_FUNC0_EG_MODE_KEEP		0
#define   AR8327_VTU_FUNC0_EG_MODE_UNTAG	1
#define   AR8327_VTU_FUNC0_EG_MODE_TAG		2
#define   AR8327_VTU_FUNC0_EG_MODE_NOT		3
#define   AR8327_VTU_FUNC0_IVL			BIT(19)
#define   AR8327_VTU_FUNC0_VALID		BIT(20)

#define AR8327_REG_VTU_FUNC1			0x0614
#define   AR8327_VTU_FUNC1_OP			BITS(0, 3)
#define   AR8327_VTU_FUNC1_OP_NOOP		0
#define   AR8327_VTU_FUNC1_OP_FLUSH		1
#define   AR8327_VTU_FUNC1_OP_LOAD		2
#define   AR8327_VTU_FUNC1_OP_PURGE		3
#define   AR8327_VTU_FUNC1_OP_REMOVE_PORT	4
#define   AR8327_VTU_FUNC1_OP_GET_NEXT		5
#define   AR8327_VTU_FUNC1_OP_GET_ONE		6
#define   AR8327_VTU_FUNC1_FULL			BIT(4)
#define   AR8327_VTU_FUNC1_PORT			BIT(8, 4)
#define   AR8327_VTU_FUNC1_PORT_S		8
#define   AR8327_VTU_FUNC1_VID			BIT(16, 12)
#define   AR8327_VTU_FUNC1_VID_S		16
#define   AR8327_VTU_FUNC1_BUSY			BIT(31)

#define AR8327_REG_ARL_CTRL			0x0618

#define AR8327_REG_FWD_CTRL0			0x620
#define   AR8327_FWD_CTRL0_CPU_PORT_EN		BIT(10)
#define   AR8327_FWD_CTRL0_MIRROR_PORT		BITS(4, 4)
#define   AR8327_FWD_CTRL0_MIRROR_PORT_S	4

#define AR8327_REG_FWD_CTRL1			0x624
#define   AR8327_FWD_CTRL1_UC_FLOOD		BITS(0, 7)
#define   AR8327_FWD_CTRL1_UC_FLOOD_S		0
#define   AR8327_FWD_CTRL1_MC_FLOOD		BITS(8, 7)
#define   AR8327_FWD_CTRL1_MC_FLOOD_S		8
#define   AR8327_FWD_CTRL1_BC_FLOOD		BITS(16, 7)
#define   AR8327_FWD_CTRL1_BC_FLOOD_S		16
#define   AR8327_FWD_CTRL1_IGMP			BITS(24, 7)
#define   AR8327_FWD_CTRL1_IGMP_S		24

#define AR8327_REG_PORT_LOOKUP(_i)		(0x660 + (_i) * 0xc)
#define   AR8327_PORT_LOOKUP_MEMBER		BITS(0, 7)
#define   AR8327_PORT_LOOKUP_IN_MODE		BITS(8, 2)
#define   AR8327_PORT_LOOKUP_IN_MODE_S		8
#define   AR8327_PORT_FORCE_PORT_VLAN_EN	BIT(10)
#define   AR8327_PORT_LOOKUP_STATE		BITS(16, 3)
#define   AR8327_PORT_LOOKUP_STATE_S		16
#define   AR8327_PORT_LOOKUP_LEARN		BIT(20)
#define   AR8327_PORT_LOOKUP_ING_MIRROR_EN	BIT(25)

#define AR8327_REG_PORT_PRIO(_i)		(0x664 + (_i) * 0xc)

#define AR8327_REG_PORT_HOL_CTRL0(_i)		(0x970 + (_i) * 0x8)
#define   AR8327_PORT_HOL_CTRL0_EG_PRI0_BUF	BITS(0, 4)
#define   AR8327_PORT_HOL_CTRL0_EG_PRI0_BUF_S	0
#define   AR8327_PORT_HOL_CTRL0_EG_PRI1_BUF	BITS(4, 4)
#define   AR8327_PORT_HOL_CTRL0_EG_PRI1_BUF_S	4
#define   AR8327_PORT_HOL_CTRL0_EG_PRI2_BUF	BITS(8, 4)
#define   AR8327_PORT_HOL_CTRL0_EG_PRI2_BUF_S	8
#define   AR8327_PORT_HOL_CTRL0_EG_PRI3_BUF	BITS(12, 4)
#define   AR8327_PORT_HOL_CTRL0_EG_PRI3_BUF_S	12
#define   AR8327_PORT_HOL_CTRL0_EG_PRI4_BUF	BITS(16, 4)
#define   AR8327_PORT_HOL_CTRL0_EG_PRI4_BUF_S	16
#define   AR8327_PORT_HOL_CTRL0_EG_PRI5_BUF	BITS(20, 4)
#define   AR8327_PORT_HOL_CTRL0_EG_PRI5_BUF_S	20
#define   AR8327_PORT_HOL_CTRL0_EG_PORT_BUF	BITS(24, 6)
#define   AR8327_PORT_HOL_CTRL0_EG_PORT_BUF_S	24

#define AR8327_REG_PORT_HOL_CTRL1(_i)		(0x974 + (_i) * 0x8)
#define   AR8327_PORT_HOL_CTRL1_ING_BUF		BITS(0, 4)
#define   AR8327_PORT_HOL_CTRL1_ING_BUF_S	0
#define   AR8327_PORT_HOL_CTRL1_EG_PRI_BUF_EN	BIT(6)
#define   AR8327_PORT_HOL_CTRL1_EG_PORT_BUF_EN	BIT(7)
#define   AR8327_PORT_HOL_CTRL1_WRED_EN		BIT(8)
#define   AR8327_PORT_HOL_CTRL1_EG_MIRROR_EN	BIT(16)

#define AR8337_PAD_MAC06_EXCHANGE_EN		BIT(31)

#define AR8327_PHY_MODE_SEL			0x12
#define   AR8327_PHY_MODE_SEL_RGMII		BIT(3)
#define AR8327_PHY_TEST_CTRL			0x0
#define   AR8327_PHY_TEST_CTRL_RGMII_RX_DELAY	BIT(15)
#define AR8327_PHY_SYS_CTRL			0x5
#define   AR8327_PHY_SYS_CTRL_RGMII_TX_DELAY	BIT(8)

#define AR8337_HAS_NO_PHY(port) (AR8327_PORT_NUM_CPU_0 == (port) || AR8327_PORT_NUM_CPU_1 == (port))
enum ar8327_led_pattern {
	AR8327_LED_PATTERN_OFF = 0,
	AR8327_LED_PATTERN_BLINK,
	AR8327_LED_PATTERN_ON,
	AR8327_LED_PATTERN_RULE,
};

struct ar8327_led_entry {
	unsigned reg;
	unsigned shift;
};

struct ar8327_led {
	struct led_classdev cdev;
	struct ar8xxx_priv *sw_priv;

	char *name;
	bool active_low;
	u8 led_num;
	enum ar8327_led_mode mode;

	struct mutex mutex;
	spinlock_t lock;
	struct work_struct led_work;
	bool enable_hw_mode;
	enum ar8327_led_pattern pattern;
};

struct ar8327_data {
	u32 port0_status;
	u32 port6_status;

	struct ar8327_led **leds;
	unsigned int num_leds;

	/* all fields below are cleared on reset */
	bool eee[AR8XXX_NUM_PHYS];

	/* array of port isolation masks */
	u32 port_isolation[AR8327_NUM_PORTS];
};

struct arl_table {
	union {
		struct {
			uint8_t mac[6];  // : 48
			uint32_t portmap    : 7;
			uint32_t port_cross : 1;
			uint32_t priority   : 3;
			uint32_t svl        : 1;
			uint32_t pri_en     : 1;
			uint32_t mirror     : 1;
			uint32_t drop       : 1;
			uint32_t reserved0  : 1; /* ATU hash ? */
			uint32_t status     : 4; /* h1-7: ~40s, hF: static, 0: none */
			uint32_t leaky      : 1;
			uint32_t rdr_to_cpu : 1;
			uint32_t cpy_to_cpu : 1;
			uint32_t reserved1  : 1;
			uint32_t vid        : 12;
			uint32_t white_list : 1;
			/* reserved */
		} __attribute__((packed));
		uint32_t _w[3];
	};
} __attribute__((packed));

struct atu_func_reg {
	union {
		struct {
			uint32_t at_func        : 4;
			uint32_t flush_static   : 1;
			uint32_t atu_type       : 1;
			uint32_t reserved0      : 2;
			uint32_t port_num       : 4;
			uint32_t at_full_vio    : 1;
			uint32_t at_multi_en    : 1;
			uint32_t at_port_en     : 1;
			uint32_t at_vid_en      : 1;
			uint32_t atu_index      : 5;
			uint32_t reserved1      : 1;
			uint32_t trunk_port     : 3;
			uint32_t reserved2      : 6;
			uint32_t busy           : 1;
		} __attribute__((packed));
		uint32_t _w;
	};
} __attribute__((packed));

/* register functions */
#define SW_BIT_MASK_U32(nr) (~(0xFFFFFFFF << (nr)))
#define SW_FIELD_MASK_U32(offset, len) ((SW_BIT_MASK_U32(len) << (offset)))
#define SW_FIELD_MASK_NOT_U32(offset, len) (~SW_FIELD_MASK_U32(offset, len))
#define SW_REG_SET_BY_FIELD_U32(reg_value, field_value, bit_offset, field_len)                  \
	do {                                                                                    \
		(reg_value) = (((reg_value)&SW_FIELD_MASK_NOT_U32((bit_offset), (field_len))) | \
			       (((field_value)&SW_BIT_MASK_U32(field_len)) << (bit_offset)));   \
	} while (0)

#define SW_FIELD_GET_BY_REG_U32(reg_value, field_value, bit_offset, field_len)                \
	do {                                                                                  \
		(field_value) = (((reg_value) >> (bit_offset)) & SW_BIT_MASK_U32(field_len)); \
	} while (0)

#define FIELD_SET(reg, field, val)                                                 \
	SW_REG_SET_BY_FIELD_U32(entry_hw->data[reg], val, reg##_##field##_BOFFSET, \
				reg##_##field##_BLEN)
#define FIELD_GET(reg, field, val)                                                 \
	SW_FIELD_GET_BY_REG_U32(entry_hw->data[reg], val, reg##_##field##_BOFFSET, \
				reg##_##field##_BLEN)

#endif
